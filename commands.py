import os
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from rocket import send_verification_code, validate_confirmation_code
from school21_api import (
    authenticate,
    get_workstation,
    get_points,
    get_participant,
    get_projects,
    get_skills,
    get_badges,
    get_logtime
)

DATA_FILE = os.path.join(os.path.dirname(__file__), "data.json")
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        DATA = json.load(f)
else:
    DATA = {}

def _save():
    with open(DATA_FILE, "w") as f:
        json.dump(DATA, f, indent=2)

def _get_user(chat_id: int) -> dict:
    return DATA.setdefault(str(chat_id), {
        "login": None,
        "tokens": None,
        "friends": []
    })

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "1Ô∏è‚É£ /auth <login> <password> ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
        "2Ô∏è‚É£ /check [login] ‚Äî –≥–¥–µ —á–µ–ª–æ–≤–µ–∫\n"
        "3Ô∏è‚É£ /checkall ‚Äî –≥–¥–µ –≤–∞—à–∏ –¥—Ä—É–∑—å—è\n"
        "4Ô∏è‚É£ /addfriend <login> 5Ô∏è‚É£ /removefriend <login>\n"
        "6Ô∏è‚É£ /listfriends ‚Äî —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π\n"
        "7Ô∏è‚É£ /myxp, /mylevel, /myprojects, /myskills, /mybadges, /logtime\n"
    )
    kb = [
        ["/auth","/check","/checkall"],
        ["/addfriend","/removefriend","/listfriends"],
        ["/myxp","/mylevel","/myprojects"],
        ["/myskills","/mybadges","/logtime"],
    ]
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

async def auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if len(context.args) != 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /auth <login> <password>")
    login, pwd = context.args
    try:
        tokens = authenticate(login, pwd)
    except Exception as e:
        return await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    user = _get_user(chat_id)
    user["login"] = login
    user["tokens"] = tokens
    _save()
    await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = _get_user(chat_id)
    if not user["login"]:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /auth")
    if len(context.args) != 1:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm <–∫–æ–¥>")
    code = context.args[0]
    ok = validate_confirmation_code(user["login"], code)
    await update.message.reply_text("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!" if ok else "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.")

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = _get_user(chat_id)
    if not user["login"]:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /auth")
    target = context.args[0] if context.args else user["login"]
    try:
        ws = get_workstation(target, user)
        await update.message.reply_text(
            f"{target} –≤ {ws['clusterName']} ‚åö —Ä—è–¥ {ws['row']} –º–µ—Å—Ç–æ {ws['number']}"
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def checkall(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = _get_user(chat_id)
    lines = []
    for f in user["friends"]:
        try:
            ws = get_workstation(f, user)
            lines.append(f"{f}: {ws['clusterName']} {ws['row']}{ws['number']}")
        except:
            lines.append(f"{f}: –æ—à–∏–±–∫–∞")
    await update.message.reply_text("\n".join(lines) or "–£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π")

async def addfriend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addfriend <login>")
    u = _get_user(chat_id)
    lr = context.args[0]
    if lr not in u["friends"]:
        u["friends"].append(lr)
        _save()
        await update.message.reply_text(f"‚úÖ {lr} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è")
    else:
        await update.message.reply_text("–£–∂–µ –≤ —Å–ø–∏—Å–∫–µ")

async def removefriend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removefriend <login>")
    u = _get_user(chat_id)
    lr = context.args[0]
    if lr in u["friends"]:
        u["friends"].remove(lr)
        _save()
        await update.message.reply_text(f"‚úÖ {lr} —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π")
    else:
        await update.message.reply_text("–¢–∞–∫–æ–≥–æ –Ω–µ—Ç")

async def listfriends(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    u = _get_user(chat_id)
    await update.message.reply_text("\n".join(u["friends"]) or "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")

async def myxp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    u = _get_user(chat_id)
    if not u["login"]:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /auth")
    try:
        pts = get_points(u["login"], u)
        await update.message.reply_text(
            f"PeerReview: {pts['peerReviewPoints']}\n"
            f"CodeReview: {pts['codeReviewPoints']}\n"
            f"Coins: {pts['coins']}"
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def mylevel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    u = _get_user(chat_id)
    if not u["login"]:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /auth")
    try:
        p = get_participant(u["login"], u)
        await update.message.reply_text(
            f"–£—Ä–æ–≤–µ–Ω—å: {p['level']}\n"
            f"XP: {p['expValue']} / {p['expToNextLevel']}"
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def myprojects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    u = _get_user(chat_id)
    if not u["login"]:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /auth")
    try:
        lst = get_projects(u["login"], u)["projects"]
        lines = [f"{p['title']} ‚Äî {p['status']}" for p in lst]
        await update.message.reply_text("\n".join(lines) or "–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def myskills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    u = _get_user(chat_id)
    if not u["login"]:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /auth")
    try:
        lst = get_skills(u["login"], u)["skills"]
        lines = [f"{s['name']}: {s['points']}" for s in lst]
        await update.message.reply_text("\n".join(lines) or "–ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def mybadges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    u = _get_user(chat_id)
    if not u["login"]:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /auth")
    try:
        lst = get_badges(u["login"], u)["badges"]
        lines = [b["name"] for b in lst]
        await update.message.reply_text("\n".join(lines) or "–ù–µ—Ç –∑–Ω–∞—á–∫–æ–≤")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def logtime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    u = _get_user(chat_id)
    if not u["login"]:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /auth")
    try:
        lt = get_logtime(u["login"], u)
        await update.message.reply_text(
            f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞ –Ω–µ–¥–µ–ª—é: {lt.get('logtimeWeeklyAvgHours')} —á."
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
