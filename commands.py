import os
import random
import string
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from db import (
    add_user, get_user_by_telegram_id, update_registration_status,
    add_friend, remove_friend, list_friends
)
from rocket_chat import send_code_to_user

SCHOOL_API_TOKEN = os.getenv("SCHOOL21_API_TOKEN")
API_BASE_URL = "https://edu-api.21-school.ru/services/21-school/api/v1"

# –°—Ç–∞—Ä—Ç /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –®–∫–æ–ª—ã 21, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å XP, –¥—Ä—É–∑–µ–π –≤ –∫–∞–º–ø—É—Å–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º.\n\n"
        "–ê–≤—Ç–æ—Ä—ã:\n"
        "–î–∏–º–∞ ‚Äî TG: @OdintD | sh21: whirlpon\n"
        "–ê—Ä—Å–∏ ‚Äî TG: @arildmt | sh21: fernaani\n\n"
        "–í–≤–µ–¥–∏—Ç–µ /register <–ª–æ–≥–∏–Ω> —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/register <–ª–æ–≥–∏–Ω> ‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/confirm <–∫–æ–¥> ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞\n"
        "/check [–ª–æ–≥–∏–Ω] ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏—Ä–∞\n"
        "/checkall ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π\n"
        "/myxp ‚Äî –ú–æ–π XP\n"
        "/mylevel ‚Äî –ú–æ–π —É—Ä–æ–≤–µ–Ω—å\n"
        "/myprojects ‚Äî –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã\n"
        "/myskills ‚Äî –ú–æ–∏ –Ω–∞–≤—ã–∫–∏\n"
        "/mybadges ‚Äî –ú–æ–∏ –∑–Ω–∞—á–∫–∏\n"
        "/logtime ‚Äî –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –∫–∞–º–ø—É—Å–µ\n"
        "/addfriend <–ª–æ–≥–∏–Ω> ‚Äî –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞\n"
        "/removefriend <–ª–æ–≥–∏–Ω> ‚Äî –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞\n"
        "/listfriends ‚Äî –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π"
    )
    keyboard = [
        ["/register", "/confirm", "/check", "/checkall"],
        ["/myxp", "/mylevel", "/myprojects"],
        ["/myskills", "/mybadges", "/logtime"],
        ["/addfriend", "/removefriend", "/listfriends"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è /register
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: /register <–ª–æ–≥–∏–Ω>")
        return
    login = context.args[0]
    telegram_id = update.effective_user.id
    username = update.effective_user.username or "unknown"

    code = ''.join(random.choices(string.digits, k=6))
    success = send_code_to_user(login, code)

    if success:
        add_user(telegram_id, username, code, login)
        await update.message.reply_text("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Rocket.Chat! –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /confirm <–∫–æ–¥>")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ —á–µ—Ä–µ–∑ Rocket.Chat.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ /confirm
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: /confirm <–∫–æ–¥>")
        return
    entered_code = context.args[0]
    user = get_user_by_telegram_id(update.effective_user.id)

    if user and user[3] == entered_code:
        update_registration_status(update.effective_user.id)
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /check [–ª–æ–≥–∏–Ω]
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    login = context.args[0] if context.args else None
    if not login:
        user = get_user_by_telegram_id(update.effective_user.id)
        if not user or not user[5]:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register.")
            return
        login = user[5]

    url = f"{API_BASE_URL}/clusters/peer/{login}"
    headers = {"Authorization": SCHOOL_API_TOKEN}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = response.json()
        await update.message.reply_text(
            f"{login} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–º–ø—É—Å–µ {data['clusterName']}, —Ä—è–¥ {data['row']}, –º–µ—Å—Ç–æ {data['number']}."
        )
    else:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {login}.")

# –ö–æ–º–∞–Ω–¥–∞ /checkall
async def checkall(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user or user[4] == 0:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register.")
        return

    friends = list_friends(update.effective_user.id)
    if not friends:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /addfriend <–ª–æ–≥–∏–Ω>.")
        return

    headers = {"Authorization": SCHOOL_API_TOKEN}
    results = []
    for login in friends:
        url = f"{API_BASE_URL}/clusters/peer/{login}"
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            results.append(f"{login}: {data['clusterName']}, —Ä—è–¥ {data['row']}, –º–µ—Å—Ç–æ {data['number']}")
        else:
            results.append(f"{login}: –ù–µ –Ω–∞–π–¥–µ–Ω")

    await update.message.reply_text("\n".join(results))

# –ö–æ–º–∞–Ω–¥–∞ /myxp
async def myxp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register.")
        return

    login = user[5]
    url = f"{API_BASE_URL}/peers/{login}/xp"
    headers = {"Authorization": SCHOOL_API_TOKEN}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = response.json()
        total_xp = sum(item['amount'] for item in data)
        await update.message.reply_text(f"–í–∞—à —Å—É–º–º–∞—Ä–Ω—ã–π XP: {total_xp}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å XP.")

# –ö–æ–º–∞–Ω–¥–∞ /mylevel
async def mylevel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register.")
        return

    login = user[5]
    url = f"{API_BASE_URL}/peers/{login}"
    headers = {"Authorization": SCHOOL_API_TOKEN}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = response.json()
        await update.message.reply_text(f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {data['level']:.2f}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å.")

# –ö–æ–º–∞–Ω–¥–∞ /myprojects
async def myprojects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register.")
        return

    login = user[5]
    url = f"{API_BASE_URL}/peers/{login}/projects"
    headers = {"Authorization": SCHOOL_API_TOKEN}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        projects = response.json()
        text = "\n".join([f"{p['title']} - {p['status']}" for p in projects])
        await update.message.reply_text(text)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /myskills
async def myskills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register.")
        return

    login = user[5]
    url = f"{API_BASE_URL}/peers/{login}/skills"
    headers = {"Authorization": SCHOOL_API_TOKEN}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        skills = response.json()
        text = "\n".join([f"{s['name']}: {s['points']}" for s in skills])
        await update.message.reply_text(text)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≤—ã–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /mybadges
async def mybadges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register.")
        return

    login = user[5]
    url = f"{API_BASE_URL}/peers/{login}/badges"
    headers = {"Authorization": SCHOOL_API_TOKEN}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        badges = response.json()
        text = "\n".join([f"{b['name']}" for b in badges])
        await update.message.reply_text(text)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /logtime
async def logtime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register.")
        return

    login = user[5]
    url = f"{API_BASE_URL}/peers/{login}/locations-stats"
    headers = {"Authorization": SCHOOL_API_TOKEN}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = response.json()
        average = data.get("averageTime")
        await update.message.reply_text(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –∫–∞–º–ø—É—Å–µ: {average} –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å.")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

# –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞ /addfriend
async def addfriend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥—Ä—É–≥–∞: /addfriend <–ª–æ–≥–∏–Ω>")
        return
    friend_login = context.args[0]
    add_friend(update.effective_user.id, friend_login)
    await update.message.reply_text(f"–î—Ä—É–≥ {friend_login} –¥–æ–±–∞–≤–ª–µ–Ω!")

# –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞ /removefriend
async def removefriend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥—Ä—É–≥–∞: /removefriend <–ª–æ–≥–∏–Ω>")
        return
    friend_login = context.args[0]
    remove_friend(update.effective_user.id, friend_login)
    await update.message.reply_text(f"–î—Ä—É–≥ {friend_login} —É–¥–∞–ª—ë–Ω.")

# –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π /listfriends
async def listfriends(update: Update, context: ContextTypes.DEFAULT_TYPE):
    friends = list_friends(update.effective_user.id)
    if friends:
        await update.message.reply_text("–í–∞—à–∏ –¥—Ä—É–∑—å—è:\n" + "\n".join(friends))
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π.")
