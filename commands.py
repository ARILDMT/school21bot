import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from school21_api import authenticate, api_get

# in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
users_data = {}

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –®–∫–æ–ª—ã 21!*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç:\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å XP\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –¥—Ä—É–∑—å—è–º–∏ –≤ –∫–∞–º–ø—É—Å–µ\n"
        "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º\n\n"
        "*–ê–≤—Ç–æ—Ä—ã:*\n"
        "–î–∏–º–∞ ‚Äî TG: @OdintD | sh21: whirlpon\n"
        "–ê—Ä—Å–∏ ‚Äî TG: @arildmt | sh21: fernaani\n\n"
        "*–ö–∞–∫ –Ω–∞—á–∞—Ç—å:*\n"
        "1. –í–≤–µ–¥–∏—Ç–µ `/auth <login> <password>` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "2. –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ç–æ–∫–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
        "   `/check [login]`, `/myxp`, `/mylevel` –∏ –¥—Ä—É–≥–∏–µ\n"
        "3. –ü—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ `access_token` –æ–Ω –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ `refresh_token`\n\n"
        "‚ñ∂ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start, /auth, /check, /checkall, /addfriend, /removefriend, /listfriends,\n"
        "/myxp, /mylevel, /myprojects, /myskills, /mybadges, /logtime\n\n"
        "–£—Å–ø–µ—Ö–æ–≤ –≤ –∫–æ–¥–∏–Ω–≥–µ! üöÄ"
    )

    keyboard = [
        ["/auth", "/check", "/checkall"],
        ["/myxp", "/mylevel"],
        ["/myprojects", "/myskills", "/mybadges"],
        ["/logtime", "/addfriend", "/removefriend", "/listfriends"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /auth <login> <password>")
        return
    login, password = context.args
    at, rt, exp = authenticate(login, password)
    if at is None:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    uid = update.effective_user.id
    users_data[uid] = {
        'login': login,
        'access_token': at,
        'refresh_token': rt,
        'expires_at': exp,
        'friends': []
    }
    await update.message.reply_text(f"–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {login}.")

def get_user_data(uid):
    return users_data.get(uid)

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    udata = get_user_data(uid)
    if not udata:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth <login> <password>.")
        return
    target = context.args[0] if context.args else udata['login']
    resp, err = api_get(udata, f"/participants/{target}/workstation")
    if err == 'auth_error' or resp is None:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ /auth –∑–∞–Ω–æ–≤–æ.")
        return
    if resp.status_code == 200:
        d = resp.json()
        await update.message.reply_text(
            f"{target}: –∫–ª–∞—Å—Ç–µ—Ä {d['clusterName']}, —Ä—è–¥ {d['row']}, –º–µ—Å—Ç–æ {d['number']}"
        )
    elif resp.status_code == 404:
        await update.message.reply_text(f"{target}: –Ω–µ –≤ –∫–∞–º–ø—É—Å–µ.")
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

async def addfriend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    udata = get_user_data(uid)
    if not udata:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addfriend <login>")
        return
    friend = context.args[0]
    if friend in udata['friends']:
        await update.message.reply_text(f"{friend} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π.")
    else:
        udata['friends'].append(friend)
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω –¥—Ä—É–≥: {friend}")

async def removefriend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    udata = get_user_data(uid)
    if not udata:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removefriend <login>")
        return
    friend = context.args[0]
    if friend in udata['friends']:
        udata['friends'].remove(friend)
        await update.message.reply_text(f"–£–¥–∞–ª—ë–Ω –¥—Ä—É–≥: {friend}")
    else:
        await update.message.reply_text(f"{friend} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π.")

async def listfriends(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    udata = get_user_data(uid)
    if not udata:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return
    if not udata['friends']:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø—É—Å—Ç.")
    else:
        await update.message.reply_text("–í–∞—à–∏ –¥—Ä—É–∑—å—è:\n" + "\n".join(udata['friends']))

async def checkall(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    udata = get_user_data(uid)
    if not udata:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return
    if not udata['friends']:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /addfriend.")
        return
    lines = []
    for friend in udata['friends']:
        resp, err = api_get(udata, f"/participants/{friend}/workstation")
        if resp and resp.status_code == 200:
            d = resp.json()
            lines.append(f"{friend}: –∫–ª–∞—Å—Ç–µ—Ä {d['clusterName']}, —Ä—è–¥ {d['row']}, –º–µ—Å—Ç–æ {d['number']}")
        else:
            lines.append(f"{friend}: –Ω–µ –≤ –∫–∞–º–ø—É—Å–µ.")
    await update.message.reply_text("\n".join(lines))

async def myxp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    udata = get_user_data(uid)
    if not udata:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return
    resp, _ = api_get(udata, f"/participants/{udata['login']}/experience-history")
    if resp and resp.status_code == 200:
        total = sum(item.get('expValue', 0) for item in resp.json().get('expHistory', []))
        await update.message.reply_text(f"–í–∞—à —Å—É–º–º–∞—Ä–Ω—ã–π XP: {total}")
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è XP.")

async def mylevel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    udata = get_user_data(uid)
    if not udata:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return
    resp, _ = api_get(udata, f"/participants/{udata['login']}")
    if resp and resp.status_code == 200:
        lvl = resp.json().get('level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        await update.message.reply_text(f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {lvl}")
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è.")

async def myprojects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    udata = get_user_data(uid)
    if not udata:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return
    resp, _ = api_get(udata, f"/participants/{udata['login']}/projects")
    if resp and resp.status_code == 200:
        projs = resp.json().get('projects', [])
        if not projs:
            await update.message.reply_text("–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            await update.message.reply_text("–ü—Ä–æ–µ–∫—Ç—ã:\n" + "\n".join(p['title'] for p in projs))
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤.")

async def myskills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    udata = get_user_data(uid)
    if not udata:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return
    resp, _ = api_get(udata, f"/participants/{udata['login']}/skills")
    if resp and resp.status_code == 200:
        skills = resp.json().get('skills', [])
        if not skills:
            await update.message.reply_text("–ù–∞–≤—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            await update.message.reply_text("–ù–∞–≤—ã–∫–∏:\n" + "\n".join(f"{s['name']}: {s['points']}" for s in skills))
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤.")

async def mybadges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    udata = get_user_data(uid)
    if not udata:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return
    resp, _ = api_get(udata, f"/participants/{udata['login']}/badges")
    if resp and resp.status_code == 200:
        badges = resp.json().get('badges', [])
        if not badges:
            await update.message.reply_text("–ó–Ω–∞—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            await update.message.reply_text(
                "–ó–Ω–∞—á–∫–∏:\n" +
                "\n".join(f"{b['name']} ({b['receiptDateTime']})" for b in badges)
            )
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∫–æ–≤.")

async def logtime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    udata = get_user_data(uid)
    if not udata:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth.")
        return
    resp, _ = api_get(udata, f"/participants/{udata['login']}/logtime")
    if resp and resp.status_code == 200:
        await update.message.reply_text(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –∫–∞–º–ø—É—Å–µ –∑–∞ –Ω–µ–¥–µ–ª—é: {resp.json()} —á.")
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è logtime.")
